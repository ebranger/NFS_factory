This folder contains a few small programs that I have either wrote or found useful to handle the relation data obtained through sieving. Most of them will require a little bit of modification before you can use them, since several parameters are currelty hard-coded, and may not be appropriate for the settings you wish to use.

RelationFilterSplit takes the siever output, checks that the relations are valid, and splits the relations into a number of files based on the size of the largest prime dividing the relation. The primes dividing the side that is not the one of interest are discarded, saving some space. The idea is to run this program on all the siever outputs to obtain reasonable-sized files that NFS_factory can use. It needs MPIR to compile, as well as polynomial.h/cpp from the main project. Currently, several parameters are hard-coded into the program, which will have to be changed depending on how many relations will be stored and on the sieve parameters.

RelationsToBinaryFormat takes the output from RelationFilterSplit and converts it into a binary format to save space. It can also take a binary file and convert it to the same format as the siever output. Currently it only works if the primes dividing the rational side are to be stored. 

remdups was taken from the gnfs-lasieve distribution, and can be used to remove duplicate relations in a sieve output file. Once RelationFilterSplit has been run, it is advised to run remdups on the output. Afterwards, the relations may be converted to binary format. 

Batchmsieve is a quick and dirty hack of the python driver by Brian Gladman to run factorizations using NFS_factory. To use this, a few folder names needs to be set in the begining of the file (MSIEVE_PATH, NFS_FACTORY_PATH, BATCH_PATH) as well as the number of relation files located in BATCH_PATH (the parameter NUM_BATCH_FILES). The script will process files named spairs1.out, spairs2.out ... found in BATCH_PATH in order. THe script invokes msieve for the postprocessing after enough relations has been found.